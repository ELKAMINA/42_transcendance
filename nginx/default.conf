#The upstream block defines a group of servers. 
#In our webapp, there's only one server named backend on port 4001. 
#This grouping can be used to load balance traffic between multiple servers, 
#but here it just simplifies referencing the backend server later in the configuration.

#======= Main context for NGINX (global)=========
# upstream frontend {
#     server frontend:3000;
# }

upstream api {
    server backend:4001;
}
#======= Main context for NGINX =========


#Context 1
server {
    #====== HTTP SERVER ========#
    #THis means that all the requests made on http are redirected to the https
    #When any request hits the Nginx on port 80 (HTTP), it will be permanently redirected (HTTP status code 301) to the HTTPS version of the site on port 8081.
    listen      80;
    server_name DOMAIN_NAME;
    return      301 https://$server_name$request_uri;
}

#Context 2
server {
    #====== HTTPS SERVER ========#

	#This block defines the server configuration for HTTPS traffic.
	# listen 443 ssl http2: Listens on the default port for HTTPS (443) 
	#and is set up to use SSL/TLS and HTTP/2. SSL certificate and private key are specified.
		listen 443 ssl;
        http2 on;

		server_name DOMAIN_NAME;
		ssl_certificate      /etc/nginx/cert.crt;
		ssl_certificate_key  /etc/nginx/cert.key;
		
		ssl_protocols TLSv1.2 TLSv1.3;
    #====== HTTPS SERVER ========#
    

    #====== API ENDPOINT CONFIGURATION ========#

	# Requests starting with /api are forwarded to the previously defined upstream group named api.
	# The rewrite directive strips off the /api prefix before sending to the backend.
	location /api/ {
        rewrite ^/api/(.*) /$1 break;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://api/;
        proxy_pass_request_headers on;

	}

	location /studio {
		return 301 http://localhost:5555;
	}

	location / {
        add_header 'Access-Control-Allow-Origin' 'http://localhost:4001' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'X-Requested-With,Accept,Content-Type, Origin, Authorization' always;
        proxy_http_version 1.1;  
        proxy_set_header Upgrade $http_upgrade;  
        proxy_set_header Connection 'upgrade';  
        proxy_set_header Host $host;  
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://frontend:3000/;
        proxy_pass_request_headers on;
	}

	location ~* \.io {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy false;

        proxy_pass http://backend;
        proxy_pass_request_headers on;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
	}

#Context 3
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}