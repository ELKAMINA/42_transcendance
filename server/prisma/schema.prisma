// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator is what the code is generated to 
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RequestStatus {
    PENDING
    REFUSED
    ACCEPTED
}

enum Status {
    Online
    Offline
    Playing
}

// Keywords for prisma :  
// - Each line of a model is a field. It is composed of 4 informations : 1) Name, 2) The type of the field, 3) Attributes (optionnal and begins with @), 4)
// - Field types : 
//    --> Boolean / String/ Int / BigInt (represents laaarge Int) / Float / Decimal / DateTime / JSON / Bytes (for files, data ) / Unsupported(" ")
// Relationship : 1 to 1 / Many to Many / 1 to Many
// Type modifier in the models are : [] to say that they are many of ... and ? to say that is optional

model User {
    createdAt             DateTime        @default(now())
    updatedAt             DateTime        @updatedAt
    user_id               String          @id @default(uuid())
    login                 String          @unique
    email                 String?         @unique
    hash                  String?
    rtHash                String?
    fA                    String?
    faEnabled             Boolean?
    avatar                String?
    provider              String?         @default("not42")
    status                Status?
    friends               User[]          @relation("Friendship")
    friendOf              User[]          @relation("Friendship")
    totalFriends          Int?            @default(0)
    //   FriendRequestSent     FriendRequest[] @relation("Sender")
    //   FriendRequestReceived FriendRequest[] @relation("Receiver")
    FriendRequestSent     FriendRequest[] @relation("Sender")
    FriendRequestReceived FriendRequest[] @relation("Receiver")
    blocked               User[]          @relation("haters")
    blockedBy             User[]          @relation("haters")
    totalBlockedFriends   Int?            @default(0)
    totalMatches          Int?            @default(0)
    totalWins             Int?            @default(0)
    totalloss             Int?            @default(0)
    level                 Int?            @default(0)
    rank                  Int?            @default(0)
    p1                    Match[]         @relation("Player1")
    p2                    Match[]         @relation("Player2")
    FriendSuggestions     String[]
    // // Channel Management
    // //*** Where the user is member ***//
    channels              Channel[]       @relation("Membership")
    // //*** Where the user is creator ***//
    createdChannels       Channel[]       @relation("ChannelCreator")
    // //*** Where the user is the owner ***//
    ownedChannels         Channel[]       @relation("ChannelOwner")
    // //*** Where the user is admin ***//
    adminChannels         Channel[]       @relation("ChannelAdmin")
    bannedFromChannels    Channel[]       @relation("ChannelBanned")
    BannedExpiry          DateTime?
    MutedInChannels       Channel[]       @relation("ChannelMuted")
    MutedExpiry           DateTime?
    messagesSent          Message[]       @relation("MessageSender")
}

model Channel {
    name        String    @unique
    channelId   Int       @id @default(autoincrement())
    members     User[]    @relation("Membership")
    createdBy   User?     @relation("ChannelCreator", fields: [createdById], references: [login], onDelete: SetNull) // When the corresponding user is deleted, set to null
    createdById String?
    ownedBy     User?     @relation("ChannelOwner", fields: [ownedById], references: [login], onDelete: SetNull) // When the corresponding user is deleted, set to null
    ownedById   String?
    admins      User[]    @relation("ChannelAdmin")
    banned      User[]    @relation("ChannelBanned")
    muted       User[]    @relation("ChannelMuted")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    type        String
	pbp			Boolean   @default(false)
    key         String?
    chatHistory Message[] @relation("channel_message")
}

model Message {
    id          Int      @id @default(autoincrement())
    sentBy      User?    @relation("MessageSender", fields: [sentById], references: [login], onDelete: SetNull) // when the corresponding user is deleted, set to null
    sentById    String?
    message     String
    sentAt      DateTime @default(now())
    img         String?
    preview     String?
    incoming    Boolean
    outgoing    Boolean
    subtype     String?
    reply       String?
    channel     Channel? @relation("channel_message", fields: [channelById], references: [name], onDelete: SetNull) // when the corresponding channel is deleted, set to null
    channelById String?
}

model Match {
    match_id   String   @id @default(uuid())
    createdAt  DateTime @default(now())
    player1Id  String
    player1    User     @relation("Player1", fields: [player1Id], references: [login])
    player2Id  String
    player2    User     @relation("Player2", fields: [player2Id], references: [login])
    p1_score   Int      @default(0)
    p2_score   Int      @default(0)
    winnerName String
}

model FriendRequest {
    id         String        @id @unique @default(uuid())
    sender     User?         @relation("Sender", fields: [senderId], references: [login], onDelete: SetNull) //  when a User record is deleted (for example, when you delete a user), the related FriendRequest records will have their corresponding senderId or receiverId set to null. 
    senderId   String?
    receiver   User?         @relation("Receiver", fields: [receiverId], references: [login], onDelete: SetNull) // when a User record is deleted (for example, when you delete a user), the related FriendRequest records will have their corresponding senderId or receiverId set to null. 
    receiverId String?
    SenderAv   String        @default("None")
    status     RequestStatus @default(PENDING)
    createdAt  DateTime      @default(now())
}

model GlobalInformation {
    id           String @id @unique @default(uuid())
    pid          String @unique @default("1")
    totalPlayers Int?   @default(0)
}
