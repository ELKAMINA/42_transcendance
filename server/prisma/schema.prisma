// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator is what the code is generated to 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  REFUSED
  ACCEPTED
}

// Keywords for prisma :  
// - Each line of a model is a field. It is composed of 4 informations : 1) Name, 2) The type of the field, 3) Attributes (optionnal and begins with @), 4)
// - Field types : 
//    --> Boolean / String/ Int / BigInt (represents laaarge Int) / Float / Decimal / DateTime / JSON / Bytes (for files, data ) / Unsupported(" ")
// Relationship : 1 to 1 / Many to Many / 1 to Many
// Type modifier in the models are : [] to say that they are many of ... and ? to say that is optional

model User {
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  user_id               String          @id @default(uuid())
  login                 String?         @unique
  email                 String?         @unique
  hash                  String?
  rtHash                String?
  fA                    String?
  faEnabled             Boolean?
  avatar                String?
  status                String?
  socketId              Int?            @unique
  totalMatches          Int?
  totalWins             Int?
  totalloss             Int?
  level                 Int?
  rank                  Int?
  friends               User[]          @relation("Friendship")
  friendOf              User[]          @relation("Friendship")
  totalFriends          Int?            @default(0)
  FriendRequestSent     FriendRequest[] @relation("Sender")
  FriendRequestReceived FriendRequest[] @relation("Receiver")
  blockedFriends        User[]          @relation("BlockedFriends")
  blockedBy             User[]          @relation("BlockedFriends")
  // blockedFriends        User[]          @relation("haters")
  // hatersId              String[]
  // Friends and blocked friends
  // lovers         User?    @relation("Friendship", fields: [loversId], references: [user_id])
  // loversId       String? // Foreign Key to connect users with friends

  // p1             Match[]  @relation("Player1")
  // p2             Match[]  @relation("Player2")
  // // Channel Management
  // //*** Where the user is member ***//
  // chanMembership Channel? @relation("Membership", fields: [channelName], references: [name])
  // channelName    String?
  // //*** If the user is creator ***//

  userUser_id String?
}

model Channel {
  name        String   @id
  // members     User[]   @relation("Membership")
  // createdBy   User?    @relation("Creation", fields: [createdById], references: [user_id])
  createdById String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String
  key         String
  userUser_id String
}

model Match {
  match_id       String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  player1Id      String
  // player1        User      @relation("Player1", fields: [player1Id], references: [user_id])
  // player2Id      String
  // player2        User      @relation("Player2", fields: [player2Id], references: [user_id])
  duration       DateTime?
  p1_rankbfmatch Int // Rank of the winner before match
  p1_rankafmatch Int // Rank of the winner after match
  p2_rankbfmatch Int // Rank of the loser before match
  p2_rankafmatch Int // Rank of the loser after match
  p1_score       Int?
  p2_score       Int?
  winner_score   Int?
  ago            DateTime?
}

model FriendRequest {
  id         String        @id @unique @default(uuid())
  sender     User          @relation("Sender", fields: [senderId], references: [login])
  senderId   String
  receiver   User          @relation("Receiver", fields: [receiverId], references: [login])
  receiverId String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}

// enum Role { 
//   BASIC
//   ADMIN
// }
