# Docker Compose uses the docker-compose file to define and run multi-containers docker applications
# When running docker compose up :
  # Step 1 :  See the dependencies and check which service will start first (here is the db)

version: "3.9"
services:
#======= Server =========#
  server:
    container_name: backend
    restart: always
    # expose:
    #   - "4001"
    #   - "4003"
    #   - "4006"
    #   - "4010"
    #   - "5555"
    ports:
      - "4001:4001"
    env_file:
      - ./server/.env
    build:
      context: ./server
      dockerfile: Dockerfile
    volumes:
      - ./server:/server
      - /server/node_modules
      - /server/prisma
    depends_on:
      database:
        condition: service_healthy
    networks:
      - transcendance

#======= Database =========#
  database:
    image: postgres:14
    container_name: db
    restart: always
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - ./server/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: trans
    networks:
      - transcendance
#As the server and the client depends on the database. We need to launch the  
#server/client being sure that database is up. Healthchek : If the command succeeds,  
#the container is considered healthy. If it fails, Docker will retry 
#the healthcheck every 0.5s until a maximum of 100 retries.
    healthcheck:
      test: ["CMD-SHELL", "psql trans -U postgres -c 'SELECT 1' || exit 1"]
      interval: 0.5s
      retries: 100

#======= Client =========#
  client:
    container_name: frontend
    restart: always
    ports:
      - '3000:3000'
    build:
      context: client
      dockerfile: Dockerfile
    volumes: # specifies how directories in the host machine should be mounted in the container
      - ./client:/app/client
      - /app/node_modules #telling docker to use the app/nodes_modules that was installed in the Dockerfile when we npm i and not the one from host machine. No bind mount from the host machine!! This is an isolated bind mount
    # links:
    #   - server
    depends_on:
      database:
        condition: service_healthy
    networks:
      - transcendance
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx
    restart: always
    ports: 
      - "8000:80"
    networks:
      - transcendance
    depends_on:
      - server
      - client
#======= Networks =========#
networks:
  transcendance:

#======= Volumes =========#
volumes:
  data: #internal label to identify volumes in docker compose
    driver: local
    name: dbase #this is the name of the volume persisted for the app on the host machine (docker host system)

